Установка ESlint
npm init
npm init @eslint/config

*-- Раздел 2 --*

Лекция - 9
прямых констант не бывает, можно поменять объект
разница между let и var в том что var можно использовать вне области видимости
и использовать до декларирования
"use strict"; - нужен для современного режима, избавляет от неточности
 

Лекция - 11 
Значение объекта можно вызывать через . или [""]
console.log(obj.name);
console.log(obj["name"]);
Массив не тип данных


Лекция - 12 массивы и объекты
для получения значения с объекта

console.log(obj[key]) //если ключ представлен в виде цифр, но лучше такой ключ
записывать в кавычках 
console.log(obj.key)

Расмотрим такой объект

const obj = {
    mother: 'nigga',
    father: 'super-nigga'
};
console.log(obj.father);
obj.grand = 'her-usatiy';
console.log(obj['grand']);

здесь после декларации объекта можно добавить ключ и значение, но вызывать
можно через console.log(obj['key']); или console.log(obj.key);

так же добавлять ключи и значения можно через
obj.['grand'] = 'her-usatiy';

монжо делать объект внутри объекта

Лекция - 13 общение с юзером
aler("text") 

const result = confirm('Норм сайт?'); // далоговое окно тру - фолс
console.log(confirm); // сохраняет булевое значение

const answer = prompt('Тебе 20?', '20'); // тут можно ввести текст и второе значение это дефолтное
console.log(answer);

const answer = +prompt('Тебе 20?', '20'); // так можно получить тип number
console.log(typeof (answer)); // а так получить тип данных

-----

const answers = [];

answers[0] = prompt('Как зовут?', ''); // ввод дданных прям с окна
answers[1] = prompt('Как фамилия?', '');
answers[2] = prompt('Сколько лет?', '');

document.write(answers); // устаревшая команда, заменяет весь текст
null тип является объектом


Лекция - 14 Интерполяция
это использование ковычек `${var}`


Лекция - 15 Операторы
конкацинация - переделывание типов данных когда строка + число или наоборот
можно использовать ++ для сложения строки числа с числом
это называется унарный плюс

пример постфикса и префикса:
let incr = 10,
    decr = 10;

incr++;
decr--;

console.log(incr++, --decr);
в данном случае console.log(inrc++... сначала вернёт значение переменной, а после
выполнит оператор, в случае с --decr) сначала выполнится --, а потом выведится значение

% - остаток
console.log(5%2); // 1 5 делить на 2 остаток 1

== сравнивание, === сравнивание и по типу
console.log(2*4 == 8); // true
но если поменять 8 на "8" то все равно будет true
можно дял этого использовать ===

&& оператор и, нужно чтобы два было правдой
|| оператор или, нужна одна правда

!= не равно / !== строгое не равно по типу
! оператор отрицания 
let isChecked = false,
    isClose = false;
console.log(isChecked || !isClose); // true так как использовался не

Лекция 16 - GIT
git init - инициализация
git config - настройки, можно ставить локально можно глобально
git config --local user.name "Name"
git config --local user.email mail@site.com 
можно использовать global вместо local

у гита 3 состояние есть
просто, редактирование, контрольная точка
для просмотра смотрим: git status 
для переноса: git add -A (добавляем)
если что-то добавить то можно просмотреть статус: git status 
можно добавлять файл определённый: git add file.ext
для создания контрольной точки: git commit -a -m"Сообщение о коммите"